(https://github.com/rvsp/typescript-oops/blob/master/Practice/Movie.md)
1.The class Movie is stated below. An instance of class Movie represents a film. This class has the following three properties:

title, which is a String representing the title of the movie
studio, which is a String representing the studio that made the movie
rating, which is a String representing the rating of the movie (i.e. PG­13, R, etc)
a) Write a constructor for the class Movie, which takes a String representing the title of the movie, a String representing the studio, and a String representing the rating as its arguments, and sets the respective class properties to these values.

b) The constructor for the class Movie will set the class property rating to "PG" as default when no rating is provided.

c) Write a method getPG, which takes an array of base type Movie as its argument, and returns a new array of only those movies in the input array with a rating of "PG". You may assume the input array is full of Movie instances. The returned array need not be full.

d) Write a piece of code that creates an instance of the class Movie with the title “Casino Royale”, the studio “Eon Productions”, and the rating “PG­13”
                          --------------------------------------------------------------------------
a) Constructor for the class Movie:

class Movie {
  constructor(title, studio, rating) {
    this.title = title;
    this.studio = studio;
    this.rating = rating;
  }
}
       
                 
b) Modified constructor for the class Movie, with default value for rating set to "PG":

class Movie {
  constructor(title, studio, rating = "PG") {
    this.title = title;
    this.studio = studio;
    this.rating = rating;
  }
}

                          
c) Method getPG:

class Movie {

  static getPG(movies) {
    const pgMovies = [];
    for (const movie of movies) {
      if (movie.rating === "PG") {
        pgMovies.push(movie);
      }
    }
    return pgMovies;
  }
}

d) Code creating an instance of the class Movie:

const casinoRoyale = new Movie("Casino Royale", "Eon Productions", "PG-13");

 __________________________________________________________________________________________________________                           

(https://github.com/rvsp/typescript-oops/blob/master/Practice/class-circle.md)

The UML diagram! Here's a possible TypeScript class based on the diagram:
class Circle {
  private radius: number;
  private color: string;

  constructor(radius: number, color: string) {
    this.radius = radius;
    this.color = color;
  }

  getRadius(): number {
    return this.radius;
  }

  setRadius(radius: number): void {
    this.radius = radius;
  }

  getColor(): string {
    return this.color;
  }

  setColor(color: string): void {
    this.color = color;
  }

  getArea(): number {
    return Math.PI * this.radius ** 2;
  }

  toString(): string {
    return `Circle[radius=${this.radius},color=${this.color}]`;
  }
}

Using the Circle class in a JavaScript file:

// Import the Circle class from the TypeScript file
import { Circle } from './circle';

// Create a new instance of the Circle class
const myCircle = new Circle(5, 'red');

// Use the Circle class methods and properties
console.log(`Radius: ${myCircle.getRadius()}`);
console.log(`Area: ${myCircle.getArea()}`);
myCircle.setColor('blue');
console.log(`Color: ${myCircle.getColor()}`);
console.log(`String representation: ${myCircle.toString()}`);

____________________________________________________________________________________________________________
(Write a “person” class to hold all the details)

class Person {
  // Private properties are hidden from outside access
  private name: string;
  private age: number;
  private email: string;
  private address: string;

  // The constructor sets initial values for the properties
  constructor(name: string, age: number, email: string, address: string) {
    this.name = name;
    this.age = age;
    this.email = email;
    this.address = address;
  }

  // Getter and setter methods provide controlled access to the properties
  getName(): string {
    return this.name;
  }

  setName(name: string): void {
    this.name = name;
  }

  getAge(): number {
    return this.age;
  }

  setAge(age: number): void {
    this.age = age;
  }

  getEmail(): string {
    return this.email;
  }

  setEmail(email: string): void {
    this.email = email;
  }

  getAddress(): string {
    return this.address;
  }

  setAddress(address: string): void {
    this.address = address;
  }

  // The toString() method provides a string representation of the object
  toString(): string {
    return `Name: ${this.name}\nAge: ${this.age}\nEmail: ${this.email}\nAddress: ${this.address}`;
  }
}

// The toString() method returns a string representation of the Person object that includes all the details.can create a new instance of the Person class like this:
const veera = new Person('veera meera', 35, 'veera.meera@example.com', '123 Main St');

Then also can use the getter and setter methods to access and modify the person's details:
veera.setEmail('veera.meera2@example.com');
console.log(veera.getEmail()); // Output: veera.meera2@example.com

And you can use the toString() method to get a string representation of the Person object:
console.log(veera.toString()); // Output: Name: veera
                              //         Age: 35
                              //         Email: veera.meera2@example.com
                              //         Address: 123 Main St



____________________________________________________________________________________________________________
(write a class to calculate the uber price.)

TypeScript class that can calculate the Uber price:

class UberPriceCalculator {
  private baseFare: number;
  private perMinute: number;
  private perMile: number;

  constructor(baseFare: number, perMinute: number, perMile: number) {
    this.baseFare = baseFare;
    this.perMinute = perMinute;
    this.perMile = perMile;
  }

  calculatePrice(distance: number, duration: number): number {
    // calculate the total price based on the given distance and duration
    const distancePrice = distance * this.perMile;
    const durationPrice = duration * this.perMinute;
    const totalPrice = this.baseFare + distancePrice + durationPrice;
    
    // round the price to two decimal places
    return Math.round(totalPrice * 100) / 100;
  }
}


how to use the UberPriceCalculator class to calculate the price of a ride:
const calculator = new UberPriceCalculator(200, 15, 70);
const distance = 10; // kilometers
const duration = 30; // minutes
const priceInRupees = calculator.calculatePrice(distance, duration);
console.log(`The Uber price is: Rs. ${priceInRupees}`);

//explaination:we create a new instance of the UberPriceCalculator class with a base fare of Rs. 200, per minute rate of Rs. 15, and per kilometer rate of Rs. 70. We then use the calculatePrice method to calculate the price of a 10-kilometer, 30-minute ride, which returns the price in rupees. Finally, we log the price to the console with the currency symbol Rs. (Indian rupee symbol).




















